<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PAT-B1001 害死人不偿命的(3n+1)猜想</title>
    <url>/2021/02/02/PAT-B1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>卡拉兹(Callatz)猜想：</p>
<p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p>
<p>输入格式：<br><code>每个测试输入包含 1 个测试用例，即给出正整数 *n* 的值。</code><br>输出格式：<br><code>输出从 *n* 计算到 1 需要的步数。</code><br>输入样例：<br><code>3</code><br>输出样例：<br><code>5</code></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li><p>简单模拟</p>
</li>
<li><p>依据题意定义计数器count统计迭代次数即可。</p>
</li>
</ul>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)	n/=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span>		n=(<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">		count++;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,count);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-B1002 写出这个数</title>
    <url>/2021/02/03/PAT-B1002-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>
<p>输入格式：</p>
<p><code>每个测试输入包含 1 个测试用例，即给出自然数n的值。这里保证n小于 10^100。</code></p>
<p>输出格式：</p>
<p><code>在一行内输出 *n* 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</code></p>
<p>输入样例：</p>
<p><code>1234567890987654321123456789</code></p>
<p>输出样例：</p>
<p><code>yi san wu</code></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li><p>数学问题</p>
</li>
<li><p>由于n小于10^100，故不可以使用int或long long类型存储(int绝对值在10^9内,long long绝对值在10^18内)，最好用字符数组存储。</p>
</li>
<li><p>字符数组使用scanf输入时没有&amp;。</p>
</li>
<li><p>对于字符数字而言，只需减去字符’0’,即可得到其对应的整形数字。</p>
</li>
<li><p>对于整形数字，将其对10取余再除以10，循环至其等于0，即可得到其各位数字。</p>
</li>
<li><p>存储各位数字的顺序是由低位至高位，但是要从高位向低位输出，可利用栈反向输出，数组也可。</p>
</li>
</ul>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> change[<span class="number">10</span>][<span class="number">5</span>]=&#123;<span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,</span><br><span class="line">				<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">101</span>];<span class="comment">//正整数 n</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;	<span class="comment">//n的各位数字之和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,n);</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(n);</span><br><span class="line">	<span class="comment">//计算n其各位数字之和</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		sum+=n[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">	<span class="comment">//将sum的各位数字压入栈 </span></span><br><span class="line">	<span class="keyword">while</span>(sum!=<span class="number">0</span>)&#123;</span><br><span class="line">		s.push(sum%<span class="number">10</span>);</span><br><span class="line">		sum/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//出栈，输出拼音数字 </span></span><br><span class="line">	<span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,change[s.top()]);</span><br><span class="line">		s.pop();</span><br><span class="line">		<span class="keyword">if</span>(!s.empty()) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-B1003 我要通过!</title>
    <url>/2021/02/04/PAT-B1003-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p>
<p>得到“<strong>答案正确</strong>”的条件是：</p>
<ol>
<li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li>
<li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li>
<li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li>
</ol>
<p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p>
<p>输入格式：</p>
<p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p>
<p>输出格式：</p>
<p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p>
<p>输入样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>题目看了好几遍，都没有看懂啥意思，在网上看了其他人的分析才了解题目大概说的啥。这道题只要理解了判断条件，作起来并不难。判断条件翻译成大白话:</li>
</ul>
<ol>
<li><p>字符串必须有且仅含有’P’,’A’,’T’三种字符，三种字符都至少出现一次。</p>
</li>
<li><p>‘P’,’T’只能出现一次,且’P’必须出现在’T’的前面。</p>
</li>
<li><p>‘A’出现的规律是:若’P’,’T’之间只有一个’A’(如:PAT),则 ‘P’之前’A’的个数=’T’之后’A’的个数。</p>
</li>
<li><p>若’P’,’T’之间不止一个’A’，则每多一个’A’，就要把’P’之前出现的’A’添加在’T’之后出现的’A’之后。</p>
</li>
</ol>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//字符串个数 </span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">110</span>]; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">	<span class="comment">//&#x27;P&#x27;出现的个数，&#x27;T&#x27;出现的个数 ， &#x27;P&#x27;的下标，&#x27;T&#x27;的下标 </span></span><br><span class="line">	<span class="keyword">int</span> countP=<span class="number">0</span>,countT=<span class="number">0</span>,pP=<span class="number">0</span>,pT=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">	<span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		<span class="comment">//若出现&#x27;P&#x27;,&#x27;A&#x27;,&#x27;T&#x27;以外的字符，直接返回0 </span></span><br><span class="line">		<span class="keyword">if</span>(!(str[i]==<span class="string">&#x27;P&#x27;</span>||str[i]==<span class="string">&#x27;A&#x27;</span>||str[i]==<span class="string">&#x27;T&#x27;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(str[i]==<span class="string">&#x27;P&#x27;</span>)&#123;</span><br><span class="line">			pP=i;</span><br><span class="line">			countP++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(str[i]==<span class="string">&#x27;T&#x27;</span>)&#123;</span><br><span class="line">			pT=i;</span><br><span class="line">			countT++;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//若&#x27;P&#x27;,&#x27;T&#x27;出现超过一次，或者&#x27;P&#x27;&#x27;T&#x27;之间一个&#x27;A&#x27;也没有，或者&#x27;T&#x27;出现在&#x27;P&#x27;之前 </span></span><br><span class="line">	<span class="keyword">if</span>(countP!=<span class="number">1</span>||countT!=<span class="number">1</span>||pT-pP<span class="number">-1</span>&lt;<span class="number">1</span>)	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> midA=pT-pP<span class="number">-1</span>;  <span class="comment">//&#x27;P&#x27;&#x27;T&#x27;之间&#x27;A&#x27;的个数 </span></span><br><span class="line">	<span class="keyword">int</span> preA=pP;	   <span class="comment">//&#x27;P&#x27;之前&#x27;A&#x27;的个数</span></span><br><span class="line">	<span class="keyword">int</span> postA=len<span class="number">-1</span>-pT;<span class="comment">//&#x27;T&#x27;之后&#x27;A&#x27;的个数 </span></span><br><span class="line">	<span class="keyword">if</span>(midA==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(preA==postA) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(preA==<span class="number">0</span>&amp;&amp;postA==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>((postA-preA)/preA==(midA<span class="number">-1</span>))	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">		<span class="keyword">if</span>(Judge(str)) <span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(i!=n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
  <entry>
    <title>PAT-B1004 成绩排名</title>
    <url>/2021/02/04/PAT-B1004-%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>
<p>输入格式：</p>
<p>每个测试输入包含 1 个测试用例，格式为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第 1 行：正整数 n </span><br><span class="line">第 2 行：第 1 个学生的姓名 学号 成绩 </span><br><span class="line">第 3 行：第 2 个学生的姓名 学号 成绩 </span><br><span class="line">... ... ... </span><br><span class="line">第 n+1 行：第 n 个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure>
<p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p>
<p>输出格式：</p>
<p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p>
<p>输入样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>输入时循环遍历所有学生，保存成绩最高学生和成绩最低学生即可</p>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//学生个数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">11</span>];	<span class="comment">//姓名 </span></span><br><span class="line">	<span class="keyword">char</span> id[<span class="number">11</span>];	<span class="comment">//学号 </span></span><br><span class="line">	<span class="keyword">int</span> grade;		<span class="comment">//成绩 </span></span><br><span class="line">&#125;temp,top,bottom;	<span class="comment">//临时变量,成绩最高学生,成绩最低学生</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	top.grade=<span class="number">-1</span>;</span><br><span class="line">	bottom.grade=<span class="number">101</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,temp.name);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,temp.id);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp.grade);</span><br><span class="line">		<span class="keyword">if</span>(temp.grade&gt;top.grade)	top=temp;</span><br><span class="line">		<span class="keyword">if</span>(temp.grade&lt;bottom.grade)	bottom=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>,top.name,top.id);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>,bottom.name,bottom.id);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
      </categories>
  </entry>
</search>
